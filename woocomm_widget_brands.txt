<?php
/**
 * Creates a Electro Product Categories Widget which can be placed in sidebar
 *
 * @class       Electro_Product_Categories_Widget
 * @version     1.0.0
 * @package     Widgets
 * @category    Class
 * @author      Transvelo
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly
}

if( class_exists( 'WP_Widget' ) ) :
    
if(!class_exists('Electro_Product_Categories_Widget')) {    
	/**
	 * Electro Products Categories widget class
	 *
	 * @since 1.0.0
	 */
	class Electro_Product_Categories_Widget extends WP_Widget {

		/**
		 * Current Category.
		 *
		 * @var bool
		 */
		public $current_cat;

		/**
		 * Current Category Parent.
		 *
		 * @var array
		 */
		public $current_cat_parent;

		public function __construct() {
			$widget_ops = array( 'classname' => 'woocommerce widget_product_categories electro_widget_product_categories', 'description' => esc_html__( 'A list of product categories.', 'electro' ) );
			parent::__construct( 'electro_product_categories_widget', esc_html__( 'Electro Product Categories', 'electro' ), $widget_ops );
		}

		public function widget($args, $instance) {
			global $wp_query, $post;

			$count = isset( $instance['count'] ) ? $instance['count'] : false;
			$hide_empty = isset( $instance['hide_empty'] ) ? $instance['hide_empty'] : false;
			$el_class = '';

			$list_args	= array(
				'show_count' => $count,
				'taxonomy' => 'product_cat',
				'echo' => false,
				'hide_empty' => $hide_empty,
				'menu_order' => 'asc'
			);

			// Setup Current Category
			$this->current_cat   = false;
			$this->current_cat_parent = false;

			if ( is_tax( 'product_cat' ) ) {

				$this->current_cat   = $wp_query->queried_object;
				$this->current_cat_parent = $this->current_cat->parent;

			} elseif ( is_singular( 'product' ) ) {

				$product_category = wc_get_product_terms( $post->ID, 'product_cat', array( 'orderby' => 'parent' ) );

				if ( $product_category ) {
					$this->current_cat   = end( $product_category );
					$this->current_cat_parent = $this->current_cat->parent;
				}

			}

			// Show Children Only
			/*if ( $this->current_cat ) {

				$el_class = 'category-single';
				$show_all_categories_text = apply_filters( 'electro_product_categories_widget_show_all_categories_text', esc_html__( 'Show All Categories', 'electro' ) );

				// Top level is needed
				$top_level = wp_list_categories( apply_filters( 'electro_product_categories_widget_top_level_list_categories_args', array(
					'title_li'           => sprintf( '<span class="show-all-cat-dropdown">%1$s</span>', $show_all_categories_text ),
					'taxonomy'           => 'product_cat',
					'parent'             => 0,
					'hierarchical'       => true,
					'hide_empty'         => false,
					'exclude'            => $this->current_cat->term_id,
					'show_count'         => $count,
					'hide_empty'         => $hide_empty,
					'echo'               => false,
					'use_desc_for_title' => 0
				) ) );

				$list_args['title_li'] = '<ul class="show-all-cat">' . $top_level . '</ul>';

				// Direct children are wanted
				$direct_children = get_terms(
					'product_cat',
					array(
						'fields'       => 'ids',
						'child_of'     => $this->current_cat->term_id,
						'hierarchical' => true,
						'hide_empty'   => false
					)
				);

				$siblings = array();
				if( $this->current_cat_parent ) {
					// Siblings are wanted
					$siblings = get_terms(
						'product_cat',
						array(
							'fields'       => 'ids',
							'child_of'     => $this->current_cat_parent,
							'hierarchical' => true,
							'hide_empty'   => false
						)
					);
				}

				$include = array_merge( array( $this->current_cat->term_id, $this->current_cat_parent ), $direct_children, $siblings );

				$list_args['include']     = implode( ',', $include );
				$list_args['depth']       = 3;

				if ( empty( $include ) ) {
					return;
				}

			} else {*/
				$all_categories_text           = apply_filters( 'electro_product_categories_widget_shop_all_categories_text', esc_html__( 'Browse Categories', 'electro' ) );
				$list_args['title_li']         = sprintf( '<span>%1$s</span>', $all_categories_text );
				//$list_args['depth']            = 2;
				$list_args['depth']            = 1;
				$list_args['child_of']         = 0;
				$list_args['hierarchical']     = 0;
			/*}*/

			$list_args['pad_counts']                 = 1;
			$list_args['show_option_none']           = esc_html__( 'No product categories exist.', 'electro' );
			$list_args['current_category']           = ( $this->current_cat ) ? $this->current_cat->term_id : '';
			$list_args['use_desc_for_title']         = apply_filters( 'electro_use_desc_for_title_product_categories_widget', 0 );
			
			echo wp_kses_post( $args['before_widget'] );
			
			$output = wp_list_categories( apply_filters( 'electro_product_categories_widget_args', $list_args ) ); 


            $wp_terms = get_categories( apply_filters( 'electro_product_categories_widget_args', $list_args ) ); $output1 = '';
            foreach($wp_terms as $wp_term){ 
                //if parent category get subcategories and brands. 
                $output1 .= '<li class="cat-item cat-item-'.$wp_term->term_id.'"><a href="'.get_category_link($wp_term).'">'.$wp_term->name.'</a>'; 
                //get subcategories of the parent 
 		    	$list_args_1	= array( 'show_count' => $count, 'taxonomy' => 'product_cat', 'echo' => false, 	'hide_empty' => $hide_empty,
			                        	 'menu_order' => 'asc', 'depth' => 1, 'child_of' => $wp_term->term_id, 'hierarchical' => 1, );               
                $subcategories = get_categories( $list_args_1 ); //var_dump($subcategories);                 
                if(!empty($subcategories)){
                    $output1 .= '<ul class="children" style="display:none;">'; 
                    $output1 .= '<li class="cat-item" style="background:#ebebeb;font-weight:bold;text-align:left;"><a href="#">Categories</a></li>';
                    foreach($subcategories as $sub_wp_term){  
                        $output1 .= '<li class="cat-item cat-item-'.$sub_wp_term->term_id.'"><a href="'.get_category_link($sub_wp_term).'">'.$sub_wp_term->name.'</a></li>'; 
                    }
                    $output1 .= '</ul>';
                }
                $product_args = array( 'post_type' => 'product', 'post_status' => 'publish', 'ignore_sticky_posts' => 1, 'posts_per_page' => '-1', 
                                    'tax_query' => array( 
                                        array( 'taxonomy' => 'product_cat', 'field' => 'term_id', //This is optional, as it defaults to 'term_id'
                                                'terms' => $wp_term->term_id, 'operator' => 'IN' // Possible values are 'IN', 'NOT IN', 'AND'.
                                        ),
                                        array( 'taxonomy' => 'product_visibility', 'field' => 'slug', 
                                                'terms' => 'exclude-from-catalog', // Possibly 'exclude-from-search' too
                                                'operator' => 'NOT IN'
                                        )
                                    )
                                );
                $products = new WP_Query($product_args); wp_reset_postdata(); //var_dump($products); 
                $pbrands = array(); $brandOutput = '';
                foreach($products->posts as $product){ 
                    //$brands = wp_get_post_terms( $product->ID, 'pa_brands' );  var_dump($brands);
                    $brands = wp_get_object_terms( $product->ID, 'pa_brands' );  //var_dump($brands); 
                    if(!empty($brands)){ 
                        foreach($brands as $brand){ 
                            if(!in_array($brand->term_id, $pbrands)){ array_push($pbrands, $brand->term_id); 
                             $brandOutput .= '<li class="cat-item cat-item-'.$brand->term_id.'"><a href="'.wc_get_page_permalink( 'shop' ).'?filter_brands='.$brand->slug.'">'.$brand->name.'</a></li>';   
                            }
                        }
                    }
                }
                if(!empty($pbrands)){
                    $output1 .= '<ul class="children" style="display:none;">'; 
                    $output1 .= '<li class="cat-item" style="background:#ebebeb;font-weight:bold;text-align:left;"><a href="#">Brands</a></li>';   
                    $output1 .= $brandOutput; $output1 .= '</ul>';
                }
                $output1 .= '</li>';
            }
            //var_dump($output1); 
			

			if ( apply_filters( 'ec_switch_to_old_epc_method', false ) ) {
				$output = str_replace('</a> (', '</a> <span class="count">(', $output);
				$output = str_replace(')', ')</span>', $output);
			} else {
				$output = str_replace('</a> (', ' <span class="count">(', $output);
				$output = str_replace(')', ')</span></a>', $output);
			}
			
			
			echo '<ul class="product-categories ' . esc_attr( $el_class ) . '">';

			//echo wp_kses_post( $output ); 
			
			echo $output1; 

			echo '</ul>';

			echo wp_kses_post( $args['after_widget'] );
		}

		public function update( $new_instance, $old_instance ) {
			$instance = array();
			if ( ! empty( $new_instance['count'] ) ) {
				$instance['count'] = strip_tags( stripslashes($new_instance['count']) );
			}
			if ( ! empty( $new_instance['hide_empty'] ) ) {
				$instance['hide_empty'] = strip_tags( stripslashes($new_instance['hide_empty']) );
			}
			return $instance;
		}

		public function form( $instance ) {
			global $wp_registered_sidebars;

			$count = isset( $instance['count'] ) ? $instance['count'] : '';
			$hide_empty = isset( $instance['hide_empty'] ) ? $instance['hide_empty'] : '';

			// If no sidebars exists.
			if ( !$wp_registered_sidebars ) {
				echo '<p>'. esc_html__('No sidebars are available.', 'electro' ) .'</p>';
				return;
			}
			?>
			<p>
				<input id="<?php echo esc_attr( $this->get_field_id( 'count' ) ); ?>" name="<?php echo esc_attr( $this->get_field_name( 'count' ) ); ?>" type="checkbox" value="1" <?php checked( $count, 1 ); ?> />
				<label for="<?php echo esc_attr( $this->get_field_id( 'count' ) ); ?>"><?php esc_html_e( 'Show Product Count:', 'electro' ) ?></label>
			</p>
			<p>
				<input id="<?php echo esc_attr( $this->get_field_id( 'hide_empty' ) ); ?>" name="<?php echo esc_attr( $this->get_field_name( 'hide_empty' ) ); ?>" type="checkbox" value="1" <?php checked( $hide_empty, 1 ); ?> />
				<label for="<?php echo esc_attr( $this->get_field_id( 'hide_empty' ) ); ?>"><?php esc_html_e( 'Hide Empty:', 'electro' ) ?></label>
			</p>
			<?php
		}
	}
}	
endif;
