
http://www.fpdf.org/
https://www.macronimous.com/resources/articles/creating-dynamic-pdf-files-using-html-php
https://www.setasign.com/products/fpdi/demos/simple-demo/
https://www.macronimous.com/resources/articles/creating-dynamic-pdf-files-using-html-php
https://daveismyname.blog/writing-to-an-existing-pdf-with-php

=====================================================================================
<?php if(isset($_REQUEST['ins'])){ $uid=$_REQUEST['ins']; ?>
<?php $postall_id = $wpdb->get_results("SELECT *from ins_policy_applicants where insumem_ID=$uid"); //var_dump($postall_id); 
      $worker_ids = count($postall_id); var_dump($worker_ids); ?> 
<script>
jQuery('.form-main').each(function(index){ //console.log(this); console.log(index);  
  if(index > 0 && index <= <?php echo $worker_ids; ?>){ }
  if(index > 0 && index > <?php echo $worker_ids; ?>){ jQuery(this).remove(); }
});
</script>

<?php for($i=0; $i< $worker_ids; $i++){ ?>
<script>
   var data = <?php echo json_encode($postall_id[$i]); ?>; console.log(data);
   var d = new Date(data.eff_date); var curr_year = d.getFullYear(); var curr_date = d.getDate(); var curr_month = d.getMonth() + 1; 
   //console.log(d); //console.log(curr_year); //console.log(curr_date); //console.log(curr_month); //Months are zero based 
   var curr__month = '';
   if(curr_month == 1){ curr__month = 'January';} if(curr_month == 2){ curr__month = 'February';}
   if(curr_month == 3){ curr__month = 'March';} if(curr_month == 4){ curr__month = 'April';}
   if(curr_month == 5){ curr__month = 'May';} if(curr_month == 6){ curr__month = 'June';}
   if(curr_month == 7){ curr__month = 'July';} if(curr_month == 8){ curr__month = 'August';}
   if(curr_month == 9){ curr__month = 'September';} if(curr_month == 10){ curr__month = 'October';}
   if(curr_month == 11){ curr__month = 'November';} if(curr_month == 12){ curr__month = 'December';}
   
   var effec_date = curr__month + ' ' + curr_date + ', ' + curr_year; //console.log(effec_date);
   
   jQuery('#wp_no'+(<?php echo $i; ?>+2)).val(data.wp_no); 
   jQuery('#ins_person'+(<?php echo $i; ?>+2)).val(data.ins_person); 
   jQuery('#eff_date'+(<?php echo $i; ?>+2)).val(effec_date); 
   jQuery('#passport'+(<?php echo $i; ?>+2)).val(data.passport);
   jQuery('#nationality'+(<?php echo $i; ?>+2)).val(data.nationality); 
   jQuery('#plan_selection'+(<?php echo $i; ?>+2)).val(data.plan_selection);
   jQuery('#planamount'+(<?php echo $i; ?>+2)).val(data.planamount);
   var dobarr=data.dob.split("-")
   jQuery('#dateo'+(<?php echo $i; ?>+2)).val(dobarr[2]);
   jQuery('#montho'+(<?php echo $i; ?>+2)).val(dobarr[1]);
   jQuery('#yearo'+(<?php echo $i; ?>+2)).val(dobarr[0]);
   jQuery('#occupation'+(<?php echo $i; ?>+2)).val(data.occupation); 
</script>
<?php } ?>

<script>
jQuery('#company_information .mb-2 .add-more-btn').css('display','none');
jQuery('#company_information .mb-2 .add_close').css('display','none');
</script>
<?php } //endif($_REQUEST['ins']) ?>




=====================================================================================

$list = $wpdb->get_results("SELECT * FROM `ins_policy_applicants` WHERE `id` IN (    
                              SELECT `id` FROM `ins_policy_applicants` WHERE 
                                     (`export_type` = 'pending' AND (`ins_class` <> 'FWMI' AND `ins_class` <> 'WCS')) OR
                                     (`export_type` = 'completed' AND (`ins_class` <> 'FWMI' AND `ins_class` <> 'WCS'))
                              )
                             HAVING `userID` = 12
                             ORDER BY `id` DESC");
			     
//date next year 
$pdate_1 = new DateTime('2018-01-01');
$eff_date_1 = date_format($pdate_1, 'Y-m-d'); echo $eff_date_1; 
$exp_date_1 = date('Y-m-d', strtotime("$eff_date_1 +12 months")); echo $exp_date_1; 
$exp_date_2 = date('Y-m-d', strtotime("$eff_date_1 +26 months")); echo $exp_date_2; 

//setting a temp folder within wordpress
updating the temporary folder location in Wordpress, by editing the wpconfig.php file 
and adding the following code:
define( 'WP_TEMP_DIR', ABSPATH . 'wp-content/tmp/') ;
This tells wordpress to use a folder within its existing directories, 
and should also inherit the permissions of a parent folder. 

//move using wp handle upload
//if ( ! function_exists( 'wp_handle_upload' ) ) { require_once( ABSPATH . 'wp-admin/includes/file.php' ); }
//$uploadedfile = $_FILES['upload']['name'];
//$upload_overrides = array( 'test_form' => false );
//$movefile = wp_handle_upload( $uploadedfile, $upload_overrides);
//$new_file_name = WP_TEMP_DIR."/$uploadedfile"; var_dump($new_file_name);
//$result = move_uploaded_file($tmp_file_name,$new_file_name); var_dump($result);
//if ( $movefile && ! isset( $movefile['error'] ) ) {
// echo "File is valid, and was successfully uploaded.\n"; var_dump( $movefile );
//} else { echo "Not uploaded.\n"; echo $movefile['error']; }


//custom pagination
//functions.php
// first create a function 
function pagainate_link_function(){
  global $wp_query;
  $big = 999999999; // need an unlikely integer
  //var_dump(get_pagenum_link( $big ));
  var_dump(get_query_var('paged'));
  echo paginate_links( array(
    'base'    => str_replace( $big, '%#%', esc_url( get_pagenum_link( $big ) ) ),
    'format'  => '%#%',
    'current' => max( 1, get_query_var('paged') ),
    'total'   => $wp_query->max_num_pages
  ));
}

//custom template for blog
<?php
/**
 * Template Name: Blog
 * 
 * @package WordPress
 * @subpackage pjh
 * @since pjh
 */

get_header(); ?>

<div class="inner-page-content-box">
  <div class="scroll-part">
    <h4 class="heading mt-0">
      <?php the_title();?>
    </h4>
    <hr class="mb-4">

<?php // Start the loop.
  $paged = ( get_query_var( 'paged' ) ) ? absint( get_query_var( 'paged' ) ) : 1;
  query_posts(array( 
     'post_type' => 'post',
     'posts_per_page' => 8,
     'paged' => $paged,
     //'showposts' => -1 
  ));
?>
<?php if ( have_posts() ) : ?>
<?php // Start the loop.
	while ( have_posts() ) : the_post();
	//get_template_part( 'template-parts/content', get_post_format() ); 
?>
	<article id="post-<?php the_ID(); ?>" <?php post_class(); ?>>
	  <div class="row">
          <div class="col-4 col-md-4 col-lg-3 col-xl-2 post_thumb"><?php the_post_thumbnail('thumbnail', ['class' => 'img-fluid img-thumbnail']); ?></div>
	  <div class="col-8 col-md-8 col-lg-9 col-xl-10">
		<h4 class="mb-4"><?php the_title(); ?></h4>
		<p class="pexcerpt"><?php the_excerpt(); ?>
		<?php echo 'â€¦ <a href="'. get_permalink($post->ID) . '">' . 'Read More &raquo;' . '</a>'; ?></p>
	  </div>
	  </div>
	</article>

	<hr class="mb-4">

<?php  endwhile; 

	  //pagainate_link_function();
	  
	// Previous/next page navigation.
	the_posts_pagination( array(
		'prev_text' => __( '<i class="fa fa-angle-left"></i>', 'twentysixteen' ),
		'next_text' => __( '<i class="fa fa-angle-right"></i>', 'twentysixteen' ),
		'screen_reader_text' => __(''),
		//'before_page_number' => '<span class="meta-nav screen-reader-text">' . __( '', 'twentysixteen' ) . ' </span>',
	));

	// If no content, include the "No posts found" template.
      else :
	 get_template_part( 'template-parts/content', 'none' );

      endif;
?>
      </div>
    </div>

<?php get_footer(); ?>



===============================================================
uploads accept: https://stackoverflow.com/questions/11832930/html-input-file-accept-attribute-file-type-csv
===============================================================
<input id="fileSelect" type="file" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" />  

Valid Accept Types:

For CSV files (.csv), use:

<input type="file" accept=".csv" />

For Excel Files 97-2003 (.xls), use:

<input type="file" accept="application/vnd.ms-excel" />

For Excel Files 2007+ (.xlsx), use:

<input type="file" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />

For Text Files (.txt) use:

<input type="file" accept="text/plain" />

For Image Files (.png/.jpg/etc), use:

<input type="file" accept="image/*" />

For HTML Files (.htm,.html), use:

<input type="file" accept="text/html" />

For Video Files (.avi, .mpg, .mpeg, .mp4), use:

<input type="file" accept="video/*" />

For Audio Files (.mp3, .wav, etc), use:

<input type="file" accept="audio/*" />

For PDF Files, use:

<input type="file" accept=".pdf" /> 


================================================================
if (qtranxf_getLanguage() == 'en') {
  // english
  print "Hello world!"; 
} elseif (qtranxf_getLanguage() == 'es') {
  // spanish
  print "Hola Mundo!";
}

==================================================================================
add_action('after_setup_theme', 'remove_admin_bar');
 
function remove_admin_bar() {
if (!current_user_can('administrator') && !is_admin()) {
  show_admin_bar(false);
}
}

===================================================================================
$url = "http://maps.googleapis.com/maps/api/distancematrix/json?origins=DN17%202HG&destinations=DN17%202HJ&mode=driving&language=en-EN&sensor=false";

$data   = @file_get_contents($url);
$result = json_decode($data, true);
//print_r($result);  //outputs the array

$distance = array( // converts the units
    "meters" => $result["rows"][0]["elements"][0]["distance"]["value"],
    "kilometers" => $result["rows"][0]["elements"][0]["distance"]["value"] / 1000,
    "yards" => $result["rows"][0]["elements"][0]["distance"]["value"] * 1.0936133,
    "miles" => $result["rows"][0]["elements"][0]["distance"]["value"] * 0.000621371
);

print_r($distance);

-----------------------------------------------------------------------------------------

cp -rfp ../../html/.[^.]* . -- all hidden files 

//check if all one options have been selected
 $('#detail-'+thisID+' .popup-box-td .popup-box-div .one').each( function() { 
    //console.log(this);
    $(this).children('.chk-bx').each(function(){ 
      console.log(this);
    });          
});


$('.add-to-cart-button').click(function(){ alert('hi') });
$('.add-to-cart-button').click(function(){ 
   var currId = $(this).attr('id');
   $.each('#detail-'+currId+' .popup-box-td .popup-box-div .one', function() { console.log(this); });
}); 
if (!$(this).(input[ type = "checkbox" ]').is(':checked')) {
  /*$('#detail-'+currId+' .popup-box-td .box-details .one .option-choice-header').css({'background':'#F00','color':'#FFF' })*/
  /*return false;*/
} else{
  /*$('.option-choice-header').css({'background':'none','color':'#A1CAF1' })
}

$('.add-to-cart-button').click(function(){ 
 var currId = $(this).attr('id');
 $('#detail-'+currId+' .popup-box-td .popup-box-div .one').each( function() { //console.log(this);
  if(! $(this).find('input[ type = "checkbox" ]').is(':checked') ){ 
   $('#detail-'+currId+' .popup-box-td .box-details .one .option-choice-header').css({'background':'#F00','color':'#FFF' });
   return false;
  } else{
   $('#detail-'+currId+' .popup-box-td .box-details .one .option-choice-header').css({'background':'none','color':'#A1CAF1'});
  }
 });
}); 

//-----------------------------------------

$('.add-to-cart-button').click(function(){ 
 var currId = $(this).attr('id');
 $('#detail-'+currId+' .popup-box-td .popup-box-div .one').each( function() { //console.log(this);
  if(! $(this).find('input[ type = "checkbox" ]').is(':checked') ){ //console.log(this);
    $('#detail-'+currId+' .popup-box-td .box-details .one .option-choice-header').css({'background':'#F00','color':'#FFF' });
  }
  else{
    $('#detail-'+currId+' .popup-box-td .box-details .one .option-choice-header').css({'background':'none','color':'#A1CAF1'});
  }
 });
});
mysqldump -u root -p magento_bigphoneshop > db-aug232017.sql
if(! $(this).find('input[type = "checkbox"]').is(':checked') ){ 
   $(this).find('.option-choice-header').css({'background':'#F00','color':'#FFF'  })
   return false;
} else{
   $(this).find('.option-choice-header').css({'background':'none','color':'#A1CAF1' })
}

//-------------
<?php
echo chr(163);
printf("%c", 163);
echo "&pound;"; //preferred for HTML
?>


//-------------
  $date_format = get_option( 'date_format' );
  $time_format = get_option( 'time_format' );
  $cTime = date("{$time_format}", current_time( 'timestamp' )); 
  
  


add_filter( 'wp_mail_from', 'your_email' ); 
function your_email( $original_email_address ) { return 'your@email-address.com'; }


add_filter( 'wp_mail_from', 'your_email' ); 
function your_email( $original_email_address ) { return get_option('admin_email'); }

//---------- wordpress widget
/**
 * @author James Lafferty
 * @since 0.1
 */

class Trizzy_NS_Widget_MailChimp extends WP_Widget {
    private $default_failure_message;
    private $default_loader_graphic = '/images/loader.gif';
    private $default_signup_text;
    private $default_success_message;
    private $default_title;
    private $successful_signup = false;
    private $subscribe_errors;
    private $trizzy_ns_mc_plugin;

    /**
     * @author James Lafferty
     * @since 0.1
     */
    public function __construct () {
        $this->default_failure_message = __('There was a problem processing your submission.','trizzy');
        $this->default_signup_text = __('Join','trizzy');
        $this->default_success_message = __('Thank you for joining our mailing list. Please check your email for a confirmation link.','trizzy');
        $this->default_title = __('Newsletter.','trizzy');
        $widget_options = array('classname' => 'widget_ns_mailchimp', 'description' => __( "Displays a sign-up form for a MailChimp mailing list.", 'trizzy'));
        parent::__construct('trizzy_ns_widget_mailchimp', __('Trizzy MailChimp List Signup', 'trizzy'), $widget_options);
        $this->trizzy_ns_mc_plugin = NS_MC_Plugin::get_instance();
        $this->default_loader_graphic = get_template_directory_uri() . $this->default_loader_graphic;
        add_action('init', array(&$this, 'add_scripts'));
        add_action('parse_request', array(&$this, 'process_submission'));
    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    public function add_scripts () {
        wp_dequeue_script('ns-mc-widget');
        wp_enqueue_script('ns-mc-widget1', get_template_directory_uri() . '/js/mailchimp-widget.js', array('jquery'), false);
    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    public function form ($instance) {
        $mcapi = $this->trizzy_ns_mc_plugin->get_mcapi();
        if (false == $mcapi) {
            echo $this->trizzy_ns_mc_plugin->get_admin_notices();
        } else {
            $this->lists = $mcapi->lists();
            $defaults = array(
                'failure_message' => $this->default_failure_message,
                'title' => $this->default_title,
                'signup_text' => $this->default_signup_text,
                'success_message' => $this->default_success_message,
                'collect_first' => false,
                'collect_last' => false,
                'old_markup' => false
                );
            $vars = wp_parse_args($instance, $defaults);
            extract($vars);
            ?>
            <h3><?php echo  __('General Settings', 'trizzy'); ?></h3>
            <p>
                <label for="<?php echo $this->get_field_id('title'); ?>"><?php echo  __('Title :', 'trizzy'); ?></label>
                <input class="widefat" id="<?php echo $this->get_field_id('title'); ?>" name="<?php echo $this->get_field_name('title'); ?>" type="text" value="<?php echo esc_attr($title); ?>" />
            </p>
            <p>
                <label for="<?php echo $this->get_field_id('desc'); ?>"><?php echo  __('Description :', 'trizzy'); ?></label>
                <textarea class="widefat" id="<?php echo $this->get_field_id('desc'); ?>" name="<?php echo $this->get_field_name('desc'); ?>"><?php echo $desc; ?></textarea>
            </p>
            <p>
                <label for="<?php echo $this->get_field_id('current_mailing_list'); ?>"><?php echo __('Select a Mailing List :', 'trizzy'); ?></label>
                <select class="widefat" id="<?php echo $this->get_field_id('current_mailing_list');?>" name="<?php echo $this->get_field_name('current_mailing_list'); ?>">
                    <?php
                    foreach ($this->lists['data'] as $key => $value) {
                        $selected = (isset($current_mailing_list) && $current_mailing_list == $value['id']) ? ' selected="selected" ' : '';
                        ?>
                        <option <?php echo $selected; ?>value="<?php echo $value['id']; ?>"><?php echo __($value['name'], 'trizzy'); ?></option>
                        <?php
                    }
                    ?>
                </select>
            </p>
            <p><strong>N.B.</strong><?php echo  __('This is the list your users will be signing up for in your sidebar.', 'trizzy'); ?></p>
            <p>
                <label for="<?php echo $this->get_field_id('signup_text'); ?>"><?php echo __('Sign Up Button Text :', 'trizzy'); ?></label>
                <input class="widefat" id="<?php echo $this->get_field_id('signup_text'); ?>" name="<?php echo $this->get_field_name('signup_text'); ?>" value="<?php echo esc_attr($signup_text); ?>" />
            </p>
            <h3><?php echo __('Personal Information', 'trizzy'); ?></h3>
            <p><?php echo __("These fields won't (and shouldn't) be required. Should the widget form collect users' first and last names?", 'trizzy'); ?></p>
            <p>
                <input type="checkbox" class="checkbox" id="<?php echo $this->get_field_id('collect_first'); ?>" name="<?php echo $this->get_field_name('collect_first'); ?>" <?php echo  checked($collect_first, true, false); ?> />
                <label for="<?php echo $this->get_field_id('collect_first'); ?>"><?php echo  __('Collect first name.', 'trizzy'); ?></label>
                <br />
                <input type="checkbox" class="checkbox" id="<?php echo  $this->get_field_id('collect_last'); ?>" name="<?php echo $this->get_field_name('collect_last'); ?>" <?php echo checked($collect_last, true, false); ?> />
                <label><?php echo __('Collect last name.', 'trizzy'); ?></label>
            </p>
            <h3><?php echo __('Notifications', 'trizzy'); ?></h3>
            <p><?php echo  __('Use these fields to customize what your visitors see after they submit the form', 'trizzy'); ?></p>
            <p>
                <label for="<?php echo $this->get_field_id('success_message'); ?>"><?php echo __('Success :', 'trizzy'); ?></label>
                <textarea class="widefat" id="<?php echo $this->get_field_id('success_message'); ?>" name="<?php echo $this->get_field_name('success_message'); ?>"><?php echo $success_message; ?></textarea>
            </p>
            <p>
                <label for="<?php echo $this->get_field_id('failure_message'); ?>"><?php echo __('Failure :', 'trizzy'); ?></label>
                <textarea class="widefat" id="<?php echo $this->get_field_id('failure_message'); ?>" name="<?php echo $this->get_field_name('failure_message'); ?>"><?php echo $failure_message; ?></textarea>
            </p>
            <?php

        }
    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    public function process_submission () {

        if (isset($_GET[$this->id_base . '_email'])) {

            header("Content-Type: application/json");

            //Assume the worst.
            $response = '';
            $result = array('success' => false, 'error' => $this->get_failure_message($_GET['ns_mc_number']));

            $merge_vars = array();

            if (! is_email($_GET[$this->id_base . '_email'])) { //Use WordPress's built-in is_email function to validate input.

                $response = json_encode($result); //If it's not a valid email address, just encode the defaults.

            } else {

                $mcapi = $this->trizzy_ns_mc_plugin->get_mcapi();

                if (false == $this->trizzy_ns_mc_plugin) {

                    $response = json_encode($result);

                } else {

                    if (isset($_GET[$this->id_base . '_first_name']) && is_string($_GET[$this->id_base . '_first_name'])) {

                        $merge_vars['FNAME'] = $_GET[$this->id_base . '_first_name'];

                    }

                    if (isset($_GET[$this->id_base . '_last_name']) && is_string($_GET[$this->id_base . '_last_name'])) {

                        $merge_vars['LNAME'] = $_GET[$this->id_base . '_last_name'];

                    }

                    $subscribed = $mcapi->listSubscribe($this->get_current_mailing_list_id($_GET['ns_mc_number']), $_GET[$this->id_base . '_email'], $merge_vars);

                    if (false == $subscribed) {

                        $response = json_encode($result);

                    } else {

                        $result['success'] = true;
                        $result['error'] = '';
                        $result['success_message'] =  $this->get_success_message($_GET['ns_mc_number']);
                        $response = json_encode($result);

                    }

                }

            }

            exit($response);

        } elseif (isset($_POST[$this->id_base . '_email'])) {

            $this->subscribe_errors = '<div class="notification closeable error"><p>'  . $this->get_failure_message($_POST['ns_mc_number']) .  '</p></div>';

            if (! is_email($_POST[$this->id_base . '_email'])) {

                return false;

            }

            $mcapi = $this->trizzy_ns_mc_plugin->get_mcapi();

            if (false == $mcapi) {

                return false;

            }

            if (is_string($_POST[$this->id_base . '_first_name'])  && '' != $_POST[$this->id_base . '_first_name']) {

                $merge_vars['FNAME'] = strip_tags($_POST[$this->id_base . '_first_name']);

            }

            if (is_string($_POST[$this->id_base . '_last_name']) && '' != $_POST[$this->id_base . '_last_name']) {

                $merge_vars['LNAME'] = strip_tags($_POST[$this->id_base . '_last_name']);

            }

            $subscribed = $mcapi->listSubscribe($this->get_current_mailing_list_id($_POST['ns_mc_number']), $_POST[$this->id_base . '_email'], $merge_vars);

            if (false == $subscribed) {

                return false;

            } else {

                $this->subscribe_errors = '';

                //setcookie($this->id_base . '-' . $this->number, $this->hash_mailing_list_id(), time() + 31556926);

                $this->successful_signup = true;

                $this->signup_success_message = '<p>' . $this->get_success_message($_POST['ns_mc_number']) . '</p>';

                return true;

            }

        }

    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    public function update ($new_instance, $old_instance) {

        $instance = $old_instance;

        $instance['collect_first'] = ! empty($new_instance['collect_first']);

        $instance['collect_last'] = ! empty($new_instance['collect_last']);

        $instance['current_mailing_list'] = esc_attr($new_instance['current_mailing_list']);

        $instance['failure_message'] = esc_attr($new_instance['failure_message']);

        $instance['signup_text'] = esc_attr($new_instance['signup_text']);

        $instance['success_message'] = esc_attr($new_instance['success_message']);

        $instance['title'] = esc_attr($new_instance['title']);

        $instance['desc'] = esc_attr($new_instance['desc']);

        return $instance;

    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    public function widget ($args, $instance) {

        extract($args);



        echo $before_widget . $before_title . $instance['title'] . $after_title;

        if ($this->successful_signup) {
            echo $this->signup_success_message;
        } else {
            ?>
            <p class="margin-bottom-15"><?php echo $instance['desc']; ?></p>
            <form action="<?php echo $_SERVER['REQUEST_URI']; ?>" id="<?php echo $this->id_base . '_form-' . $this->number; ?>" method="post">
                <?php echo $this->subscribe_errors;?>
                <?php
                if ($instance['collect_first']) {
                    ?>
                    <input value="<?php echo __('First Name :', 'trizzy'); ?>" onblur="if(this.value=='')this.value='<?php echo __('First Name :', 'trizzy'); ?>';" onfocus="if(this.value=='<?php echo __('First Name :', 'trizzy'); ?>')this.value='';" type="text" name="<?php echo $this->id_base . '_first_name'; ?>" />
                    <br />
                    <br />
                    <?php
                }
                if ($instance['collect_last']) {
                    ?>
                    <input value="<?php echo __('Last Name :', 'trizzy'); ?>" onblur="if(this.value=='')this.value='<?php echo __('Last Name :', 'trizzy'); ?>';" onfocus="if(this.value=='<?php echo __('Last Name :', 'trizzy'); ?>')this.value='';" type="text" name="<?php echo $this->id_base . '_last_name'; ?>" />
                    <br />
                    <br />
                    <?php
                }
                ?>
                <input type="hidden" name="ns_mc_number" value="<?php echo $this->number; ?>" />
                <input class="newsletter" onblur="if(this.value=='')this.value='mail@example.com';" onfocus="if(this.value=='mail@example.com')this.value='';" value="mail@example.com" id="<?php echo $this->id_base; ?>-email-<?php echo $this->number; ?>" type="text" name="<?php echo $this->id_base; ?>_email" />
                <input class="newsletter-btn" type="submit" name="<?php echo __($instance['signup_text'], 'trizzy'); ?>" value="<?php echo __($instance['signup_text'], 'trizzy'); ?>" />
            </form>
            <script>jQuery('#<?php echo $this->id_base; ?>_form-<?php echo $this->number; ?>').ns_mc_widget({"url" : "<?php echo $_SERVER['PHP_SELF']; ?>", "cookie_id" : "<?php echo $this->id_base; ?>-<?php echo $this->number; ?>", "cookie_value" : "<?php echo $this->hash_mailing_list_id(); ?>", "loader_graphic" : "<?php echo $this->default_loader_graphic; ?>"}); </script>
            <?php
        }
        echo $after_widget;


    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    private function hash_mailing_list_id () {

        $options = get_option($this->option_name);

        $hash = md5($options[$this->number]['current_mailing_list']);

        return $hash;

    }

    /**
     * @author James Lafferty
     * @since 0.1
     */

    private function get_current_mailing_list_id ($number = null) {

        $options = get_option($this->option_name);

        return $options[$number]['current_mailing_list'];

    }

    /**
     * @author James Lafferty
     * @since 0.5
     */

    private function get_failure_message ($number = null) {

        $options = get_option($this->option_name);

        return $options[$number]['failure_message'];

    }

    /**
     * @author James Lafferty
     * @since 0.5
     */

    private function get_success_message ($number = null) {

        $options = get_option($this->option_name);

        return $options[$number]['success_message'];

    }

}

---------------------------------------------------------------------------------------------

// Creating the widget 
class wpb_widget extends WP_Widget {

function __construct() {
parent::__construct(
// Base ID of your widget
'wpb_widget', 

// Widget name will appear in UI
__('WPBeginner Widget', 'wpb_widget_domain'), 

// Widget description
array( 'description' => __( 'Sample widget based on WPBeginner Tutorial', 'wpb_widget_domain' ), ) 
);
}

// Creating widget front-end
// This is where the action happens
public function widget( $args, $instance ) {
$title = apply_filters( 'widget_title', $instance['title'] );
// before and after widget arguments are defined by themes
echo $args['before_widget'];
if ( ! empty( $title ) )
echo $args['before_title'] . $title . $args['after_title'];

// This is where you run the code and display the output
echo __( 'Hello, World!', 'wpb_widget_domain' );
echo $args['after_widget'];
}
		
// Widget Backend 
public function form( $instance ) {
if ( isset( $instance[ 'title' ] ) ) {
$title = $instance[ 'title' ];
}
else {
$title = __( 'New title', 'wpb_widget_domain' );
}
// Widget admin form
?>
<p>
<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 
<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>" />
</p>
<?php 
}
	
// Updating widget replacing old instances with new
public function update( $new_instance, $old_instance ) {
$instance = array();
$instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';
return $instance;
}
} // Class wpb_widget ends here

// Register and load the widget
function wpb_load_widget() {
	register_widget( 'wpb_widget' );
}
add_action( 'widgets_init', 'wpb_load_widget' );

===========================================================

/**
 * Join posts and postmeta tables
 *
 * http://codex.wordpress.org/Plugin_API/Filter_Reference/posts_join
 */
function cf_search_join( $join ) {
    global $wpdb;

    if ( is_search() ) {    
        $join .=' LEFT JOIN '.$wpdb->postmeta. ' ON '. $wpdb->posts . '.ID = ' . $wpdb->postmeta . '.post_id ';
    }
    
    return $join;
}
add_filter('posts_join', 'cf_search_join' );


/**
 * Modify the search query with posts_where
 *
 * http://codex.wordpress.org/Plugin_API/Filter_Reference/posts_where
 */
function cf_search_where( $where ) {
    global $wpdb;
   
    if ( is_search() ) {
        $where = preg_replace(
            "/\(\s*".$wpdb->posts.".post_title\s+LIKE\s*(\'[^\']+\')\s*\)/",
            "(".$wpdb->posts.".post_title LIKE $1) OR (".$wpdb->postmeta.".meta_value LIKE $1)", $where );
    }

    return $where;
}
add_filter( 'posts_where', 'cf_search_where' );

=====================================================

Add the following to functions.php to start searching WordPress by custom fields. Not only will this code modify the search on the front-end, but youâ€™ll also be able to search the edit screens in the admin by custom fields as well.


<?php
/**
 * Extend WordPress search to include custom fields
 *
 * http://adambalee.com
 */

/**
 * Join posts and postmeta tables
 *
 * http://codex.wordpress.org/Plugin_API/Filter_Reference/posts_join
 */
function cf_search_join( $join ) {
    global $wpdb;

    if ( is_search() ) {    
        $join .=' LEFT JOIN '.$wpdb->postmeta. ' ON '. $wpdb->posts . '.ID = ' . $wpdb->postmeta . '.post_id ';
    }
    
    return $join;
}
add_filter('posts_join', 'cf_search_join' );

/**
 * Modify the search query with posts_where
 *
 * http://codex.wordpress.org/Plugin_API/Filter_Reference/posts_where
 */
function cf_search_where( $where ) {
    global $wpdb;
   
    if ( is_search() ) {
        $where = preg_replace(
            "/\(\s*".$wpdb->posts.".post_title\s+LIKE\s*(\'[^\']+\')\s*\)/",
            "(".$wpdb->posts.".post_title LIKE $1) OR (".$wpdb->postmeta.".meta_value LIKE $1)", $where );
    }

    return $where;
}
add_filter( 'posts_where', 'cf_search_where' );

/**
 * Prevent duplicates
 *
 * http://codex.wordpress.org/Plugin_API/Filter_Reference/posts_distinct
 */
function cf_search_distinct( $where ) {
    global $wpdb;

    if ( is_search() ) {
        return "DISTINCT";
    }

    return $where;
}
add_filter( 'posts_distinct', 'cf_search_distinct' );

--------------------------------------------------------------------------------------

loaders
----------

<div class="overlay" style="position:absolute;top:0;left:0;bottom:0;right:0;background-color:rgba(0,0,0,0.5);z-index:88;display:none;">
<div class="spinner" style="position: absolute; background: url('<?php echo get_template_directory_uri().'/product/ajaxloading.gif'; ?>') no-repeat;background-size:100px 100px;opacity:0.7;filter:alpha(opacity=70);top:50%;left:50%;width:200px;height:200px;z-index:99;"></div>
</div>

<script>
jQuery('button.single_add_to_cart_button').click(function(){ 
 var pageUrl = window.location.href;
 var splitUrl = pageUrl.split('/');  
 var options = splitUrl[(splitUrl.length - 1)]; 
 var rOptions = options.replace('#', ''); //alert(rOptions);

 //if rOptions does not contain skuId, display error message
 if( rOptions.indexOf('skuId') == -1 ){ 
    alert('All Options Need To Be Selected, Before Adding To Cart'); return false; 
 }
 if( rOptions != ''){
   jQuery('.overlay').css('display', 'block');
   jQuery.ajax({  
      url: kt_ajax_fontend.ajaxurl,  
      method: "POST",  
      dataType: "html",
      data:{ 
	'action':'action_addProductToCart',
        'options':rOptions,
      },
      success:function(response){
        console.log('Success: Product Added To Cart'); 
        alert('Success: Product has been added To Cart');
        //jQuery('.overlay').css('display', 'none');
        window.location.assign('http://lab-1.sketchdemos.com/P1013_API_integration/cart/');
      }
   });  
 }
});
</script>






